diff --git a/src/clientversion.cpp b/src/clientversion.cpp
index 662fbb6..33be4d9 100644
--- a/src/clientversion.cpp
+++ b/src/clientversion.cpp
@@ -66,7 +66,7 @@ const std::string CLIENT_NAME("Satoshi");
 #endif
 #endif
 
-const std::string CLIENT_BUILD(BUILD_DESC CLIENT_VERSION_SUFFIX);
+const std::string CLIENT_BUILD("");
 
 static std::string FormatVersion(int nVersion)
 {
diff --git a/src/net_processing.cpp b/src/net_processing.cpp
index 6aa4bab..9b68f99 100644
--- a/src/net_processing.cpp
+++ b/src/net_processing.cpp
@@ -32,10 +32,6 @@
 
 #include <memory>
 
-#if defined(NDEBUG)
-# error "Bitcoin cannot be compiled without assertions."
-#endif
-
 std::atomic<int64_t> nTimeBestReceived(0); // Used only to inform the wallet of when we last received a block
 
 struct IteratorComparator
diff --git a/src/validation.cpp b/src/validation.cpp
index b3d1fcf..17640ee 100644
--- a/src/validation.cpp
+++ b/src/validation.cpp
@@ -46,10 +46,6 @@
 #include <boost/algorithm/string/join.hpp>
 #include <boost/thread.hpp>
 
-#if defined(NDEBUG)
-# error "Bitcoin cannot be compiled without assertions."
-#endif
-
 #define MICRO 0.000001
 #define MILLI 0.001
 
diff --git a/src/sync.h b/src/sync.h
index 3c451af..38d50d5 100644
--- a/src/sync.h
+++ b/src/sync.h
@@ -84,8 +84,8 @@ void static inline AssertLockHeldInternal(const char* pszName, const char* pszFi
 void static inline AssertLockNotHeldInternal(const char* pszName, const char* pszFile, int nLine, void* cs) {}
 void static inline DeleteLock(void* cs) {}
 #endif
-#define AssertLockHeld(cs) AssertLockHeldInternal(#cs, __FILE__, __LINE__, &cs)
-#define AssertLockNotHeld(cs) AssertLockNotHeldInternal(#cs, __FILE__, __LINE__, &cs)
+#define AssertLockHeld(cs) AssertLockHeldInternal(#cs, __FILE__, 0, &cs)
+#define AssertLockNotHeld(cs) AssertLockNotHeldInternal(#cs, __FILE__, 0, &cs)
 
 /**
  * Wrapped mutex: supports recursive locking, but no waiting
@@ -175,13 +175,13 @@ public:
 #define PASTE(x, y) x ## y
 #define PASTE2(x, y) PASTE(x, y)
 
-#define LOCK(cs) CCriticalBlock PASTE2(criticalblock, __COUNTER__)(cs, #cs, __FILE__, __LINE__)
-#define LOCK2(cs1, cs2) CCriticalBlock criticalblock1(cs1, #cs1, __FILE__, __LINE__), criticalblock2(cs2, #cs2, __FILE__, __LINE__)
-#define TRY_LOCK(cs, name) CCriticalBlock name(cs, #cs, __FILE__, __LINE__, true)
+#define LOCK(cs) CCriticalBlock PASTE2(criticalblock, __COUNTER__)(cs, #cs, __FILE__, 0)
+#define LOCK2(cs1, cs2) CCriticalBlock criticalblock1(cs1, #cs1, __FILE__, 0), criticalblock2(cs2, #cs2, __FILE__, 0)
+#define TRY_LOCK(cs, name) CCriticalBlock name(cs, #cs, __FILE__, 0, true)
 
 #define ENTER_CRITICAL_SECTION(cs)                            \
     {                                                         \
-        EnterCritical(#cs, __FILE__, __LINE__, (void*)(&cs)); \
+        EnterCritical(#cs, __FILE__, 0, (void*)(&cs));        \
         (cs).lock();                                          \
     }
 
